"use client";

import { useState } from "react";
import axios from "axios";
import { Loader2 } from "lucide-react";

function AnalysisView() {
  const [idea, setIdea] = useState("");
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleAnalyze = async () => {
    setLoading(true);
    try {
      const res = await axios.post("/api/analyze-idea", { idea });
      setAnalysis(res.data);
    } catch (err) {
      setAnalysis(null);
    }
    setLoading(false);
  };

  return (
    <div className="relative h-[85vh] flex flex-col bg-gradient-to-br from-[#0f172a] via-[#1e293b] to-[#0f172a] rounded-2xl border border-blue-500/20 shadow-xl overflow-hidden">
      {/* Header */}
      <div className="p-5 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 backdrop-blur-md border-b border-white/10">
        <h2 className="text-xl font-bold text-white flex items-center gap-2">
          ðŸ“Š Idea Analysis
        </h2>
        <p className="text-sm text-gray-300">
          Problem & Vision generated by AI
        </p>
      </div>

      {/* Content */}
      <div className="flex-1 p-6 overflow-y-auto space-y-6">
        {loading && (
          <div className="flex items-center gap-3 text-gray-400">
            <Loader2 className="animate-spin h-5 w-5 text-indigo-400" />
            <p className="font-medium">Analyzing idea...</p>
          </div>
        )}

        {analysis?.problem && (
          <div className="p-5 rounded-xl bg-white/5 border border-white/10 shadow-md hover:shadow-blue-500/20 transition">
            <h3 className="text-blue-400 font-semibold text-lg mb-2">Problem</h3>
            <p className="text-gray-200">{analysis.problem.summary}</p>
            <ul className="list-disc list-inside text-gray-400 mt-2 space-y-1">
              {analysis.problem.key_issues?.map((issue, i) => (
                <li key={i}>{issue}</li>
              ))}
            </ul>
          </div>
        )}

        {analysis?.vision && (
          <div className="p-5 rounded-xl bg-white/5 border border-white/10 shadow-md hover:shadow-purple-500/20 transition">
            <h3 className="text-purple-400 font-semibold text-lg mb-2">Vision</h3>
            <p className="text-gray-200">{analysis.vision.summary}</p>
            <ul className="list-disc list-inside text-gray-400 mt-2 space-y-1">
              {analysis.vision.key_components?.map((comp, i) => (
                <li key={i}>{comp}</li>
              ))}
            </ul>
          </div>
        )}
      </div>

      {/* Input */}
      <div className="border-t border-white/10 bg-black/30 backdrop-blur-md p-4">
        <div className="flex gap-3">
          <textarea
            placeholder="ðŸ’¡ Type your startup idea..."
            value={idea}
            onChange={(e) => setIdea(e.target.value)}
            className="w-full bg-black/30 border border-white/20 rounded-xl p-4 text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none h-20"
          />
          <button
            onClick={handleAnalyze}
            disabled={!idea || loading}
            className="bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 px-6 py-3 rounded-xl text-white font-semibold transition disabled:opacity-50"
          >
            {loading ? "Thinking..." : "Analyze"}
          </button>
        </div>
      </div>
    </div>
  );
}

export default AnalysisView;
